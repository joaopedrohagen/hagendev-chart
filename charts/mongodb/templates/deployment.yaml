{{- define "deploy" }}
{{- $service := .service }}
{{- $namespace := .namespace }}
{{- if $service.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $service.name }}
  namespace: {{ $namespace }}

  # annotations:
  #   "helm.sh/hook": pre-install
  #   "helm.sh/hook-weight": "6"

spec:
  selector:
    matchLabels:
      app: {{ $service.name }}

  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate

  template:
    metadata:
      labels:
        app: {{ $service.name }}

    spec:
      containers:

        - name: {{ $service.name }}
          image: {{ $service.image }}
          imagePullPolicy: {{ $service.imagePullPolicy }}

          resources:
            requests:
              cpu: {{ $service.cpu.min }}
              memory: {{ $service.memory.min }}
            limits:
              cpu: {{ $service.cpu.max }}
              memory: {{ $service.memory.max }}

          ports:
            - containerPort: {{ $service.containerPort }}

          envFrom:
            - secretRef:
                name: {{ $service.name }}
            -  configMapRef:
                name: {{ $service.name }}

          {{- if and $service.persistentVolume (hasKey $service.persistentVolume "enabled") $service.persistentVolume.enabled }}
          volumeMounts:
            - name: {{ $service.name }}
              mountPath: {{ $service.mountPath }}
          {{- end }}

      {{- if and $service.persistentVolume (hasKey $service.persistentVolume "enabled") $service.persistentVolume.enabled }}
      volumes:
        - name: {{ $service.name }}
          persistentVolumeClaim:
            claimName: {{ $service.name }}
      {{- end }}

      imagePullSecrets:
        - name: docker-secret

      tolerations:
        - key: environment
          operator: Equal
          value: {{ $service.tolerations }}
          effect: NoSchedule
{{- end }}
{{- end }}

{{- range $service := .Values.microservices }}
  {{- include "deploy" (dict "service" $service "namespace" $.Values.namespace) }}
{{ end }}
